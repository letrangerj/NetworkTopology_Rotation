# Figure Captions — Step 03: Modularity Analysis
# Path: figures/network_topology/step03_modularity_figures/figure_captions.txt
# Generated: 2025-10-08
# Author: automated-agent (engineer)
#
# Notes:
# - These captions describe the plots produced by Step 03 modularity analysis (replicate Louvain,
#   co-assignment matrix, and consensus partitioning). They explain what each figure shows,
#   how to interpret the visual encodings, and how to use the numeric outputs produced by the script.
# - Relevant programmatic outputs used to generate and interpret these figures:
#     results/phase_04/modularity/modularity_scores.csv   (replicate modularity Q values)
#     results/phase_04/modularity/coassignment_matrix.rds (co-assignment proportions)
#     results/phase_04/modularity/modules_fg_consensus.csv (consensus node → module)
#
# -----------------------------------------------------------------------------
# File: figures/network_topology/step03_modularity_figures/modularity_histogram.pdf
# -----------------------------------------------------------------------------
Caption:
Histogram of modularity (Q) values across replicate community-detection runs (Louvain algorithm;
pilot replicates = 20). Each bar shows the frequency of replicate modularity scores; the distribution
characterizes the stability and variability of the community-detection objective across stochastic runs.
Interpreting this plot:
  - Center and spread: the replicate mean modularity is ≈ 0.412 (SD ≈ 0.020; n = 20; min ≈ 0.374; max ≈ 0.433).
    A tight distribution (small SD relative to the mean) indicates the partitioning algorithm returns
    consistently similar quality partitions under the chosen randomization protocol; a wide distribution
    suggests high algorithmic instability.
  - Consensus modularity indicator: the plot marks the modularity computed on the consensus partition
    (the dashed line). If the consensus modularity is near the replicate mean, the consensus partition
    represents a solution with comparable quality to typical single-run partitions.
  - Practical guidance: use this histogram to (a) pick a reasonable replicate count for stability
    checks (here 20 was a pilot run), and (b) decide whether to increase replicates (e.g., to 100)
    if the SD is large relative to the mean or if the goals require robust module assignments.
Files & usage:
  - Location: figures/network_topology/step03_modularity_figures/modularity_histogram.pdf
  - Numeric replicate values: results/phase_04/modularity/modularity_scores.csv
  - Recommended interpretation threshold: if SD/mean > ~0.05 consider increasing the number of replicates.

# -----------------------------------------------------------------------------
# File: figures/network_topology/step03_modularity_figures/coassignment_heatmap.png
# File: figures/network_topology/step03_modularity_figures/coassignment_heatmap.pdf
# -----------------------------------------------------------------------------
Caption:
Co-assignment matrix heatmap (nodes ordered by consensus partition). Each cell (i, j) reports the
proportion of replicate partitions in which node i and node j were assigned to the same module (range 0.0–1.0).
Color scale: white ≈ 0 (never co-assigned), orange ≈ intermediate co-assignment frequency, red ≈ 1 (always co-assigned).
How to read the heatmap:
  - Block-diagonal structure: dense, contiguous red blocks along the diagonal correspond to sets of nodes
    that are frequently grouped together across replicates — these are the robust cores of consensus modules.
  - Off-diagonal coloration: elevated off-diagonal values between two different diagonal blocks indicate
    that nodes from those blocks are sometimes merged by the algorithm (ambiguity or hierarchical structure).
  - Gradient within a block: varying intensities inside a block reveal which nodes are central (high co-assignment
    with most block members) versus peripheral (lower co-assignment frequency) within the same consensus module.
Why this figure matters biologically:
  - Stability of functional modules: strong, compact blocks of FG nodes (and/or pyov nodes) indicate consistent
    functional group ↔ pyoverdine module structure; these modules are candidates for biological interpretation,
    e.g., co-evolving synthetases and receptors, ecological guilds, or habitat-specific interaction motifs.
  - Ambiguous boundaries: fuzzy or partially co-assigned nodes suggest either (i) nodes that bridge multiple interaction
    contexts (e.g., generalist consumers or multi-synthetase producers), or (ii) limits of resolution for the algorithm
    at the current network representation. These are good candidates for sensitivity analysis (remove node, rerun,
    or inspect biological metadata).
Practical instructions:
  - Thresholding: to extract a "core" module for downstream functional enrichment or visualization, select nodes
    with average co-assignment > 0.8 to the module core. Nodes with co-assignment values between ~0.4–0.8 are
    semi-consistent and should be flagged; values < 0.4 indicate weak or unstable module membership.
  - Cross-reference: use results/phase_04/modularity/modules_fg_consensus.csv to map node IDs → consensus module,
    and consult results/phase_04/modularity/coassignment_matrix.rds (or CSV) to compute per-node average co-assignment scores.
Files & usage:
  - Heatmap files: PNG and PDF versions in figures/network_topology/step03_modularity_figures/
  - Co-assignment matrix: results/phase_04/modularity/coassignment_matrix.rds and coassignment_matrix.csv
  - Consensus membership: results/phase_04/modularity/modules_fg_consensus.csv

# -----------------------------------------------------------------------------
# How these figures were produced (method summary) — short technical note
# -----------------------------------------------------------------------------
Brief method summary and notes on how to interpret the pipeline outputs together:
  1. Input network: FG (functional-group) nodes + PYO (pyoverdine) nodes with undirected bipartite edges
     (agent ↔ pyov) derived from Phase 3 adjacency/edge lists.
  2. Replicates: the script ran n = 20 stochastic Louvain replicates (seeded deterministically).
     Small random permutations of vertex order induced replicate variability to probe stability.
  3. Per-replicate output: for each replicate the algorithm returns a partition and its modularity (Q).
     These Q values are plotted in the modularity histogram to inspect replicate-level variability.
  4. Co-assignment matrix: the script computes the proportion of replicates in which each node pair is
     co-assigned; this matrix quantifies pairwise partition stability across runs.
  5. Consensus partition: the consensus assignment was derived by clustering the co-assignment matrix
     (Louvain on the co-assignment graph). The consensus partition is available at:
       results/phase_04/modularity/modules_fg_consensus.csv
     and was used to order rows/columns in the co-assignment heatmap.
  6. Recommended follow-ups:
     - If modularity variance is large, increase replicate count and re-evaluate co-assignment stability.
     - Use per-node co-assignment scores to identify robust module cores vs. ambiguous nodes.
     - Annotate FG and pyov node tables with consensus module IDs and plot the bipartite network colored by consensus modules
       for biological interpretation (e.g., examine which modules contain both producers and consumers and whether modules
       are enriched for particular taxa or habitats).
  7. Key numbers from this run:
     - Replicates: 20
     - Replicate modularity Q: mean ≈ 0.412, SD ≈ 0.020, min ≈ 0.374, max ≈ 0.433
     - Consensus modules (from modules_fg_consensus.csv): 5 modules (labeled 1..5 in the CSV)
     - File locations:
         * figures/network_topology/step03_modularity_figures/modularity_histogram.pdf
         * figures/network_topology/step03_modularity_figures/coassignment_heatmap.pdf
         * results/phase_04/modularity/coassignment_matrix.rds (raw co-assignment matrix)
         * results/phase_04/modularity/modules_fg_consensus.csv (node → consensus module)
         * results/phase_04/modularity/modularity_scores.csv (replicate Q values)
#
# -----------------------------------------------------------------------------
# Usage tips for manuscript figures
# -----------------------------------------------------------------------------
  - Use the modularity histogram as a supplemental panel to demonstrate algorithmic stability.
  - Use the co-assignment heatmap as a visual justification for consensus modules (include an inset
    colorbar showing the 0→1 scale). In the main figure, show a simplified bipartite network colored
    by consensus module, and place the heatmap in supplementary material to document stability.
  - Always accompany module-level biological claims (e.g., "module A is enriched for X") with a brief
    stability statement referencing the co-assignment scores (e.g., "module A core nodes have average
    co-assignment > 0.85 across 20 replicates").
#
# End of file.
